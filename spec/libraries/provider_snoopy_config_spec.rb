# Encoding: UTF-8

require_relative '../spec_helper'
require_relative '../../libraries/provider_snoopy_config'
require_relative '../../libraries/resource_snoopy_config'

describe Chef::Provider::SnoopyConfig do
  let(:name) { 'default' }
  let(:config) { nil }
  let(:run_context) { ChefSpec::SoloRunner.new.converge.run_context }
  let(:new_resource) do
    r = Chef::Resource::SnoopyConfig.new(name, run_context)
    r.config(config) unless config.nil?
    r
  end
  let(:provider) { described_class.new(new_resource, run_context) }

  describe '.provides?' do
    let(:platform) { nil }
    let(:node) { ChefSpec::Macros.stub_node('node.example', platform) }
    let(:res) { described_class.provides?(node, new_resource) }

    context 'Ubuntu' do
      let(:platform) { { platform: 'ubuntu', version: '14.04' } }

      it 'returns true' do
        expect(res).to eq(true)
      end
    end
  end

  describe '#whyrun_supported?' do
    it 'returns true' do
      expect(provider.whyrun_supported?).to eq(true)
    end
  end

  describe '#action_create' do
    shared_examples_for 'any attribute set' do
      it 'installs the inifile gem' do
        p = provider
        expect(p).to receive(:chef_gem).with('inifile').and_yield
        expect(p).to receive(:compile_time).with(false)
        p.action_create
      end
    end

    context 'no config attribute' do
      let(:config) { nil }

      it_behaves_like 'any attribute set'

      it 'renders an empty config file' do
        expected = <<-EOH.gsub(/^ +/, '').strip
          ;;; This file generated by Chef.
          ;;; Do not modify it by hand. Any changes will be overwritten.
          [snoopy]
        EOH
        p = provider
        expect(p).to receive(:file).with('/etc/snoopy.ini').and_yield
        expect(p).to receive(:content).with(expected)
        expect(p).to receive(:lazy).and_yield
        p.action_create
      end
    end

    context 'an empty config attribute' do
      let(:config) { {} }
      it_behaves_like 'any attribute set'

      it 'renders an empty config file' do
        expected = <<-EOH.gsub(/^ +/, '').strip
          ;;; This file generated by Chef.
          ;;; Do not modify it by hand. Any changes will be overwritten.
          [snoopy]
        EOH
        p = provider
        expect(p).to receive(:file).with('/etc/snoopy.ini').and_yield
        expect(p).to receive(:content).with(expected)
        expect(p).to receive(:lazy).and_yield
        p.action_create
      end
    end

    context 'a mostly simple config attribute' do
      let(:config) { { syslog_ident: 'my-ident', syslog_level: 'LOG_INFO' } }

      it_behaves_like 'any attribute set'

      it 'renders an appropriate config file' do
        expected = <<-EOH.gsub(/^ +/, '').strip
          ;;; This file generated by Chef.
          ;;; Do not modify it by hand. Any changes will be overwritten.
          [snoopy]
          syslog_ident = my-ident
          syslog_level = LOG_INFO
        EOH
        p = provider
        expect(p).to receive(:file).with('/etc/snoopy.ini').and_yield
        expect(p).to receive(:content).with(expected)
        expect(p).to receive(:lazy).and_yield
        p.action_create
      end
    end

    context 'a more complex config attribute' do
      let(:config) do
        {
          message_format: 'uid=%{uid} tty=%{tty} cmdline=%{cmdline}',
          filter_chain: 'exclude_uid:0',
          output: 'socket:/var/run/socket-for-snoopy.sock',
          error_logging: 'yes',
          syslog_facility: 'CRON'
        }
      end

      it_behaves_like 'any attribute set'

      it 'renders an appropriate config file' do
        expected = <<-EOH.gsub(/^ +/, '').strip
          ;;; This file generated by Chef.
          ;;; Do not modify it by hand. Any changes will be overwritten.
          [snoopy]
          message_format = uid=%{uid} tty=%{tty} cmdline=%{cmdline}
          filter_chain = exclude_uid:0
          output = socket:/var/run/socket-for-snoopy.sock
          error_logging = yes
          syslog_facility = CRON
        EOH
        p = provider
        expect(p).to receive(:file).with('/etc/snoopy.ini').and_yield
        expect(p).to receive(:content).with(expected)
        expect(p).to receive(:lazy).and_yield
        p.action_create
      end
    end
  end

  describe '#action_remove' do
    it 'deletes the config file' do
      p = provider
      expect(p).to receive(:file).with('/etc/snoopy.ini').and_yield
      expect(p).to receive(:action).with(:delete)
      p.action_remove
    end
  end
end
